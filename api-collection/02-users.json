		{
			"name": "ðŸ‘¥ User Management",
			"description": "User management endpoints for creating, updating, and managing users with role assignments",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has users array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/?page=1&page_size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "role",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of users with optional filtering by role, status, or search term."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{user_id}}"]
						},
						"description": "Get specific user by ID."
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created user ID for cleanup",
									"    pm.environment.set('created_user_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"newuser@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"confirm_password\": \"SecurePass123!\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Smith\",\n    \"mobile_number\": \"+1987654321\",\n    \"role_id\": null,\n    \"date_of_birth\": \"1990-01-15\",\n    \"gender\": \"female\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", ""]
						},
						"description": "Create a new user. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Jane Updated\",\n    \"last_name\": \"Smith Updated\",\n    \"mobile_number\": \"+1987654322\",\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{created_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{created_user_id}}"]
						},
						"description": "Update user information. Users can update their own profile, admins can update any user."
					},
					"response": []
				},
				{
					"name": "Change User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"SecurePass123!\",\n    \"new_password\": \"NewSecurePass123!\",\n    \"confirm_password\": \"NewSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{user_id}}", "change-password"]
						},
						"description": "Change user password. Users can change their own password, admins can change any user's password."
					},
					"response": []
				},
				{
					"name": "Assign Role to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role_id\": \"{{role_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{created_user_id}}/assign-role",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{created_user_id}}", "assign-role"]
						},
						"description": "Assign a role to a user. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Get User Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permissions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}/permissions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{user_id}}", "permissions"]
						},
						"description": "Get all permissions for a specific user (from their assigned role)."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{created_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{created_user_id}}"]
						},
						"description": "Delete a user. Requires admin privileges. Usually performs soft delete."
					},
					"response": []
				}
			]
		},